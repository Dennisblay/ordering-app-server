// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, email, phone, address
FROM "user"
`

type GetAllUsersRow struct {
	ID      int32       `json:"id"`
	Name    pgtype.Text `json:"name"`
	Email   string      `json:"email"`
	Phone   pgtype.Text `json:"phone"`
	Address pgtype.Text `json:"address"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUsersRow{}
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, phone, address
FROM "user"
where email = $1
limit 1
`

type GetUserByEmailRow struct {
	ID      int32       `json:"id"`
	Name    pgtype.Text `json:"name"`
	Email   string      `json:"email"`
	Phone   pgtype.Text `json:"phone"`
	Address pgtype.Text `json:"address"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
	)
	return i, err
}

const getUserByEmailAndPassword = `-- name: GetUserByEmailAndPassword :one
SELECT id, name, email, phone, address
FROM "user"
where email = $1
  and password_hash = $2
LIMIT 1
`

type GetUserByEmailAndPasswordParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

type GetUserByEmailAndPasswordRow struct {
	ID      int32       `json:"id"`
	Name    pgtype.Text `json:"name"`
	Email   string      `json:"email"`
	Phone   pgtype.Text `json:"phone"`
	Address pgtype.Text `json:"address"`
}

func (q *Queries) GetUserByEmailAndPassword(ctx context.Context, arg GetUserByEmailAndPasswordParams) (GetUserByEmailAndPasswordRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmailAndPassword, arg.Email, arg.PasswordHash)
	var i GetUserByEmailAndPasswordRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, phone, address
FROM "user"
where id = $1
limit 1
`

type GetUserByIdRow struct {
	ID      int32       `json:"id"`
	Name    pgtype.Text `json:"name"`
	Email   string      `json:"email"`
	Phone   pgtype.Text `json:"phone"`
	Address pgtype.Text `json:"address"`
}

func (q *Queries) GetUserById(ctx context.Context, id int32) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, name, email, phone, address
FROM "user"
where phone = $1
limit 1
`

type GetUserByPhoneRow struct {
	ID      int32       `json:"id"`
	Name    pgtype.Text `json:"name"`
	Email   string      `json:"email"`
	Phone   pgtype.Text `json:"phone"`
	Address pgtype.Text `json:"address"`
}

func (q *Queries) GetUserByPhone(ctx context.Context, phone pgtype.Text) (GetUserByPhoneRow, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phone)
	var i GetUserByPhoneRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
	)
	return i, err
}
