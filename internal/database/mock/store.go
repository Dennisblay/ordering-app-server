// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dennisblay/ordering-app-server/internal/database/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination internal/database/mock/store.go github.com/Dennisblay/ordering-app-server/internal/database/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/Dennisblay/ordering-app-server/internal/database/sqlc"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateBooking mocks base method.
func (m *MockStore) CreateBooking(arg0 context.Context, arg1 db.CreateBookingParams) (db.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", arg0, arg1)
	ret0, _ := ret[0].(db.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockStoreMockRecorder) CreateBooking(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockStore)(nil).CreateBooking), arg0, arg1)
}

// CreateNotification mocks base method.
func (m *MockStore) CreateNotification(arg0 context.Context, arg1 db.CreateNotificationParams) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", arg0, arg1)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockStoreMockRecorder) CreateNotification(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockStore)(nil).CreateNotification), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(arg0 context.Context, arg1 db.CreateOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), arg0, arg1)
}

// CreateOrderItem mocks base method.
func (m *MockStore) CreateOrderItem(arg0 context.Context, arg1 db.CreateOrderItemParams) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockStoreMockRecorder) CreateOrderItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockStore)(nil).CreateOrderItem), arg0, arg1)
}

// CreatePayment mocks base method.
func (m *MockStore) CreatePayment(arg0 context.Context, arg1 db.CreatePaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockStoreMockRecorder) CreatePayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockStore)(nil).CreatePayment), arg0, arg1)
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(arg0 context.Context, arg1 db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), arg0, arg1)
}

// CreateReview mocks base method.
func (m *MockStore) CreateReview(arg0 context.Context, arg1 db.CreateReviewParams) (db.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0, arg1)
	ret0, _ := ret[0].(db.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockStoreMockRecorder) CreateReview(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockStore)(nil).CreateReview), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockStore) CreateRole(arg0 context.Context, arg1 string) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockStoreMockRecorder) CreateRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockStore)(nil).CreateRole), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateSocialMedia mocks base method.
func (m *MockStore) CreateSocialMedia(arg0 context.Context, arg1 db.CreateSocialMediaParams) (db.SocialMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSocialMedia", arg0, arg1)
	ret0, _ := ret[0].(db.SocialMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSocialMedia indicates an expected call of CreateSocialMedia.
func (mr *MockStoreMockRecorder) CreateSocialMedia(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSocialMedia", reflect.TypeOf((*MockStore)(nil).CreateSocialMedia), arg0, arg1)
}

// CreateTestimonial mocks base method.
func (m *MockStore) CreateTestimonial(arg0 context.Context, arg1 db.CreateTestimonialParams) (db.Testimonial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTestimonial", arg0, arg1)
	ret0, _ := ret[0].(db.Testimonial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTestimonial indicates an expected call of CreateTestimonial.
func (mr *MockStoreMockRecorder) CreateTestimonial(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestimonial", reflect.TypeOf((*MockStore)(nil).CreateTestimonial), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserRole mocks base method.
func (m *MockStore) CreateUserRole(arg0 context.Context, arg1 db.CreateUserRoleParams) (db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRole", arg0, arg1)
	ret0, _ := ret[0].(db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserRole indicates an expected call of CreateUserRole.
func (mr *MockStoreMockRecorder) CreateUserRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRole", reflect.TypeOf((*MockStore)(nil).CreateUserRole), arg0, arg1)
}

// DeleteBooking mocks base method.
func (m *MockStore) DeleteBooking(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBooking", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBooking indicates an expected call of DeleteBooking.
func (mr *MockStoreMockRecorder) DeleteBooking(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBooking", reflect.TypeOf((*MockStore)(nil).DeleteBooking), arg0, arg1)
}

// DeleteNotification mocks base method.
func (m *MockStore) DeleteNotification(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockStoreMockRecorder) DeleteNotification(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockStore)(nil).DeleteNotification), arg0, arg1)
}

// DeleteOrder mocks base method.
func (m *MockStore) DeleteOrder(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockStoreMockRecorder) DeleteOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockStore)(nil).DeleteOrder), arg0, arg1)
}

// DeleteOrderItem mocks base method.
func (m *MockStore) DeleteOrderItem(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderItem indicates an expected call of DeleteOrderItem.
func (mr *MockStoreMockRecorder) DeleteOrderItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderItem", reflect.TypeOf((*MockStore)(nil).DeleteOrderItem), arg0, arg1)
}

// DeletePayment mocks base method.
func (m *MockStore) DeletePayment(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePayment indicates an expected call of DeletePayment.
func (mr *MockStoreMockRecorder) DeletePayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePayment", reflect.TypeOf((*MockStore)(nil).DeletePayment), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockStore) DeleteProduct(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStoreMockRecorder) DeleteProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStore)(nil).DeleteProduct), arg0, arg1)
}

// DeleteReview mocks base method.
func (m *MockStore) DeleteReview(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockStoreMockRecorder) DeleteReview(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockStore)(nil).DeleteReview), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockStore) DeleteRole(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockStoreMockRecorder) DeleteRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockStore)(nil).DeleteRole), arg0, arg1)
}

// DeleteSession mocks base method.
func (m *MockStore) DeleteSession(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockStoreMockRecorder) DeleteSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockStore)(nil).DeleteSession), arg0, arg1)
}

// DeleteSocialMedia mocks base method.
func (m *MockStore) DeleteSocialMedia(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSocialMedia", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSocialMedia indicates an expected call of DeleteSocialMedia.
func (mr *MockStoreMockRecorder) DeleteSocialMedia(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSocialMedia", reflect.TypeOf((*MockStore)(nil).DeleteSocialMedia), arg0, arg1)
}

// DeleteTestimonial mocks base method.
func (m *MockStore) DeleteTestimonial(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTestimonial", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTestimonial indicates an expected call of DeleteTestimonial.
func (mr *MockStoreMockRecorder) DeleteTestimonial(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTestimonial", reflect.TypeOf((*MockStore)(nil).DeleteTestimonial), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserRole mocks base method.
func (m *MockStore) DeleteUserRole(arg0 context.Context, arg1 db.DeleteUserRoleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRole indicates an expected call of DeleteUserRole.
func (mr *MockStoreMockRecorder) DeleteUserRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRole", reflect.TypeOf((*MockStore)(nil).DeleteUserRole), arg0, arg1)
}

// GetAllBookings mocks base method.
func (m *MockStore) GetAllBookings(arg0 context.Context) ([]db.GetAllBookingsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBookings", arg0)
	ret0, _ := ret[0].([]db.GetAllBookingsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBookings indicates an expected call of GetAllBookings.
func (mr *MockStoreMockRecorder) GetAllBookings(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBookings", reflect.TypeOf((*MockStore)(nil).GetAllBookings), arg0)
}

// GetAllNotifications mocks base method.
func (m *MockStore) GetAllNotifications(arg0 context.Context) ([]db.GetAllNotificationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotifications", arg0)
	ret0, _ := ret[0].([]db.GetAllNotificationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotifications indicates an expected call of GetAllNotifications.
func (mr *MockStoreMockRecorder) GetAllNotifications(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotifications", reflect.TypeOf((*MockStore)(nil).GetAllNotifications), arg0)
}

// GetAllOrderItems mocks base method.
func (m *MockStore) GetAllOrderItems(arg0 context.Context) ([]db.GetAllOrderItemsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderItems", arg0)
	ret0, _ := ret[0].([]db.GetAllOrderItemsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrderItems indicates an expected call of GetAllOrderItems.
func (mr *MockStoreMockRecorder) GetAllOrderItems(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderItems", reflect.TypeOf((*MockStore)(nil).GetAllOrderItems), arg0)
}

// GetAllOrders mocks base method.
func (m *MockStore) GetAllOrders(arg0 context.Context) ([]db.GetAllOrdersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", arg0)
	ret0, _ := ret[0].([]db.GetAllOrdersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockStoreMockRecorder) GetAllOrders(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockStore)(nil).GetAllOrders), arg0)
}

// GetAllPayments mocks base method.
func (m *MockStore) GetAllPayments(arg0 context.Context) ([]db.GetAllPaymentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPayments", arg0)
	ret0, _ := ret[0].([]db.GetAllPaymentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPayments indicates an expected call of GetAllPayments.
func (mr *MockStoreMockRecorder) GetAllPayments(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPayments", reflect.TypeOf((*MockStore)(nil).GetAllPayments), arg0)
}

// GetAllProducts mocks base method.
func (m *MockStore) GetAllProducts(arg0 context.Context) ([]db.GetAllProductsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", arg0)
	ret0, _ := ret[0].([]db.GetAllProductsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockStoreMockRecorder) GetAllProducts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockStore)(nil).GetAllProducts), arg0)
}

// GetAllReviews mocks base method.
func (m *MockStore) GetAllReviews(arg0 context.Context) ([]db.GetAllReviewsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReviews", arg0)
	ret0, _ := ret[0].([]db.GetAllReviewsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReviews indicates an expected call of GetAllReviews.
func (mr *MockStoreMockRecorder) GetAllReviews(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReviews", reflect.TypeOf((*MockStore)(nil).GetAllReviews), arg0)
}

// GetAllRoles mocks base method.
func (m *MockStore) GetAllRoles(arg0 context.Context) ([]db.GetAllRolesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles", arg0)
	ret0, _ := ret[0].([]db.GetAllRolesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockStoreMockRecorder) GetAllRoles(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockStore)(nil).GetAllRoles), arg0)
}

// GetAllSessions mocks base method.
func (m *MockStore) GetAllSessions(arg0 context.Context) ([]db.GetAllSessionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSessions", arg0)
	ret0, _ := ret[0].([]db.GetAllSessionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSessions indicates an expected call of GetAllSessions.
func (mr *MockStoreMockRecorder) GetAllSessions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSessions", reflect.TypeOf((*MockStore)(nil).GetAllSessions), arg0)
}

// GetAllSocialMedia mocks base method.
func (m *MockStore) GetAllSocialMedia(arg0 context.Context) ([]db.GetAllSocialMediaRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSocialMedia", arg0)
	ret0, _ := ret[0].([]db.GetAllSocialMediaRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSocialMedia indicates an expected call of GetAllSocialMedia.
func (mr *MockStoreMockRecorder) GetAllSocialMedia(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSocialMedia", reflect.TypeOf((*MockStore)(nil).GetAllSocialMedia), arg0)
}

// GetAllTestimonials mocks base method.
func (m *MockStore) GetAllTestimonials(arg0 context.Context) ([]db.GetAllTestimonialsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTestimonials", arg0)
	ret0, _ := ret[0].([]db.GetAllTestimonialsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTestimonials indicates an expected call of GetAllTestimonials.
func (mr *MockStoreMockRecorder) GetAllTestimonials(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTestimonials", reflect.TypeOf((*MockStore)(nil).GetAllTestimonials), arg0)
}

// GetAllUserRoles mocks base method.
func (m *MockStore) GetAllUserRoles(arg0 context.Context) ([]db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserRoles", arg0)
	ret0, _ := ret[0].([]db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserRoles indicates an expected call of GetAllUserRoles.
func (mr *MockStoreMockRecorder) GetAllUserRoles(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserRoles", reflect.TypeOf((*MockStore)(nil).GetAllUserRoles), arg0)
}

// GetBookingById mocks base method.
func (m *MockStore) GetBookingById(arg0 context.Context, arg1 int32) (db.GetBookingByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingById", arg0, arg1)
	ret0, _ := ret[0].(db.GetBookingByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingById indicates an expected call of GetBookingById.
func (mr *MockStoreMockRecorder) GetBookingById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingById", reflect.TypeOf((*MockStore)(nil).GetBookingById), arg0, arg1)
}

// GetBookingsByUserId mocks base method.
func (m *MockStore) GetBookingsByUserId(arg0 context.Context, arg1 pgtype.Int4) ([]db.GetBookingsByUserIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetBookingsByUserIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingsByUserId indicates an expected call of GetBookingsByUserId.
func (mr *MockStoreMockRecorder) GetBookingsByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingsByUserId", reflect.TypeOf((*MockStore)(nil).GetBookingsByUserId), arg0, arg1)
}

// GetNotificationById mocks base method.
func (m *MockStore) GetNotificationById(arg0 context.Context, arg1 int32) (db.GetNotificationByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationById", arg0, arg1)
	ret0, _ := ret[0].(db.GetNotificationByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationById indicates an expected call of GetNotificationById.
func (mr *MockStoreMockRecorder) GetNotificationById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationById", reflect.TypeOf((*MockStore)(nil).GetNotificationById), arg0, arg1)
}

// GetNotificationsByUserId mocks base method.
func (m *MockStore) GetNotificationsByUserId(arg0 context.Context, arg1 pgtype.Int4) ([]db.GetNotificationsByUserIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetNotificationsByUserIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationsByUserId indicates an expected call of GetNotificationsByUserId.
func (mr *MockStoreMockRecorder) GetNotificationsByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsByUserId", reflect.TypeOf((*MockStore)(nil).GetNotificationsByUserId), arg0, arg1)
}

// GetOrderById mocks base method.
func (m *MockStore) GetOrderById(arg0 context.Context, arg1 int32) (db.GetOrderByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", arg0, arg1)
	ret0, _ := ret[0].(db.GetOrderByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockStoreMockRecorder) GetOrderById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockStore)(nil).GetOrderById), arg0, arg1)
}

// GetOrderItemById mocks base method.
func (m *MockStore) GetOrderItemById(arg0 context.Context, arg1 int32) (db.GetOrderItemByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemById", arg0, arg1)
	ret0, _ := ret[0].(db.GetOrderItemByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemById indicates an expected call of GetOrderItemById.
func (mr *MockStoreMockRecorder) GetOrderItemById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemById", reflect.TypeOf((*MockStore)(nil).GetOrderItemById), arg0, arg1)
}

// GetOrderItemsByOrderId mocks base method.
func (m *MockStore) GetOrderItemsByOrderId(arg0 context.Context, arg1 pgtype.Int4) ([]db.GetOrderItemsByOrderIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemsByOrderId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetOrderItemsByOrderIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemsByOrderId indicates an expected call of GetOrderItemsByOrderId.
func (mr *MockStoreMockRecorder) GetOrderItemsByOrderId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsByOrderId", reflect.TypeOf((*MockStore)(nil).GetOrderItemsByOrderId), arg0, arg1)
}

// GetOrdersByUserId mocks base method.
func (m *MockStore) GetOrdersByUserId(arg0 context.Context, arg1 pgtype.Int4) ([]db.GetOrdersByUserIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetOrdersByUserIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserId indicates an expected call of GetOrdersByUserId.
func (mr *MockStoreMockRecorder) GetOrdersByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserId", reflect.TypeOf((*MockStore)(nil).GetOrdersByUserId), arg0, arg1)
}

// GetPaymentById mocks base method.
func (m *MockStore) GetPaymentById(arg0 context.Context, arg1 int32) (db.GetPaymentByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentById", arg0, arg1)
	ret0, _ := ret[0].(db.GetPaymentByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentById indicates an expected call of GetPaymentById.
func (mr *MockStoreMockRecorder) GetPaymentById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentById", reflect.TypeOf((*MockStore)(nil).GetPaymentById), arg0, arg1)
}

// GetPaymentsByOrderId mocks base method.
func (m *MockStore) GetPaymentsByOrderId(arg0 context.Context, arg1 pgtype.Int4) ([]db.GetPaymentsByOrderIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByOrderId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPaymentsByOrderIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByOrderId indicates an expected call of GetPaymentsByOrderId.
func (mr *MockStoreMockRecorder) GetPaymentsByOrderId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByOrderId", reflect.TypeOf((*MockStore)(nil).GetPaymentsByOrderId), arg0, arg1)
}

// GetProductById mocks base method.
func (m *MockStore) GetProductById(arg0 context.Context, arg1 int32) (db.GetProductByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", arg0, arg1)
	ret0, _ := ret[0].(db.GetProductByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockStoreMockRecorder) GetProductById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockStore)(nil).GetProductById), arg0, arg1)
}

// GetReviewById mocks base method.
func (m *MockStore) GetReviewById(arg0 context.Context, arg1 int32) (db.GetReviewByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewById", arg0, arg1)
	ret0, _ := ret[0].(db.GetReviewByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewById indicates an expected call of GetReviewById.
func (mr *MockStoreMockRecorder) GetReviewById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewById", reflect.TypeOf((*MockStore)(nil).GetReviewById), arg0, arg1)
}

// GetReviewsByProductId mocks base method.
func (m *MockStore) GetReviewsByProductId(arg0 context.Context, arg1 pgtype.Int4) ([]db.GetReviewsByProductIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByProductId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetReviewsByProductIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByProductId indicates an expected call of GetReviewsByProductId.
func (mr *MockStoreMockRecorder) GetReviewsByProductId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByProductId", reflect.TypeOf((*MockStore)(nil).GetReviewsByProductId), arg0, arg1)
}

// GetRoleById mocks base method.
func (m *MockStore) GetRoleById(arg0 context.Context, arg1 int32) (db.GetRoleByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleById", arg0, arg1)
	ret0, _ := ret[0].(db.GetRoleByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleById indicates an expected call of GetRoleById.
func (mr *MockStoreMockRecorder) GetRoleById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleById", reflect.TypeOf((*MockStore)(nil).GetRoleById), arg0, arg1)
}

// GetRoleByName mocks base method.
func (m *MockStore) GetRoleByName(arg0 context.Context, arg1 string) (db.GetRoleByNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByName", arg0, arg1)
	ret0, _ := ret[0].(db.GetRoleByNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByName indicates an expected call of GetRoleByName.
func (mr *MockStoreMockRecorder) GetRoleByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByName", reflect.TypeOf((*MockStore)(nil).GetRoleByName), arg0, arg1)
}

// GetSessionById mocks base method.
func (m *MockStore) GetSessionById(arg0 context.Context, arg1 int32) (db.GetSessionByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionById", arg0, arg1)
	ret0, _ := ret[0].(db.GetSessionByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionById indicates an expected call of GetSessionById.
func (mr *MockStoreMockRecorder) GetSessionById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionById", reflect.TypeOf((*MockStore)(nil).GetSessionById), arg0, arg1)
}

// GetSessionByToken mocks base method.
func (m *MockStore) GetSessionByToken(arg0 context.Context, arg1 string) (db.GetSessionByTokenRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByToken", arg0, arg1)
	ret0, _ := ret[0].(db.GetSessionByTokenRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByToken indicates an expected call of GetSessionByToken.
func (mr *MockStoreMockRecorder) GetSessionByToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByToken", reflect.TypeOf((*MockStore)(nil).GetSessionByToken), arg0, arg1)
}

// GetSocialMediaById mocks base method.
func (m *MockStore) GetSocialMediaById(arg0 context.Context, arg1 int32) (db.GetSocialMediaByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocialMediaById", arg0, arg1)
	ret0, _ := ret[0].(db.GetSocialMediaByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSocialMediaById indicates an expected call of GetSocialMediaById.
func (mr *MockStoreMockRecorder) GetSocialMediaById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocialMediaById", reflect.TypeOf((*MockStore)(nil).GetSocialMediaById), arg0, arg1)
}

// GetSocialMediaByUserId mocks base method.
func (m *MockStore) GetSocialMediaByUserId(arg0 context.Context, arg1 pgtype.Int4) ([]db.GetSocialMediaByUserIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocialMediaByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetSocialMediaByUserIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSocialMediaByUserId indicates an expected call of GetSocialMediaByUserId.
func (mr *MockStoreMockRecorder) GetSocialMediaByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocialMediaByUserId", reflect.TypeOf((*MockStore)(nil).GetSocialMediaByUserId), arg0, arg1)
}

// GetTestimonialById mocks base method.
func (m *MockStore) GetTestimonialById(arg0 context.Context, arg1 int32) (db.GetTestimonialByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestimonialById", arg0, arg1)
	ret0, _ := ret[0].(db.GetTestimonialByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestimonialById indicates an expected call of GetTestimonialById.
func (mr *MockStoreMockRecorder) GetTestimonialById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestimonialById", reflect.TypeOf((*MockStore)(nil).GetTestimonialById), arg0, arg1)
}

// GetTestimonialsByUserId mocks base method.
func (m *MockStore) GetTestimonialsByUserId(arg0 context.Context, arg1 pgtype.Int4) ([]db.GetTestimonialsByUserIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestimonialsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetTestimonialsByUserIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestimonialsByUserId indicates an expected call of GetTestimonialsByUserId.
func (mr *MockStoreMockRecorder) GetTestimonialsByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestimonialsByUserId", reflect.TypeOf((*MockStore)(nil).GetTestimonialsByUserId), arg0, arg1)
}

// GetUserByEmailAndPassword mocks base method.
func (m *MockStore) GetUserByEmailAndPassword(arg0 context.Context, arg1 db.GetUserByEmailAndPasswordParams) (db.GetUserByEmailAndPasswordRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailAndPassword", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByEmailAndPasswordRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailAndPassword indicates an expected call of GetUserByEmailAndPassword.
func (mr *MockStoreMockRecorder) GetUserByEmailAndPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailAndPassword", reflect.TypeOf((*MockStore)(nil).GetUserByEmailAndPassword), arg0, arg1)
}

// GetUserByEmailOrPassword mocks base method.
func (m *MockStore) GetUserByEmailOrPassword(arg0 context.Context, arg1 db.GetUserByEmailOrPasswordParams) (db.GetUserByEmailOrPasswordRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailOrPassword", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByEmailOrPasswordRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailOrPassword indicates an expected call of GetUserByEmailOrPassword.
func (mr *MockStoreMockRecorder) GetUserByEmailOrPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailOrPassword", reflect.TypeOf((*MockStore)(nil).GetUserByEmailOrPassword), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockStore) GetUserById(arg0 context.Context, arg1 int32) (db.GetUserByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStoreMockRecorder) GetUserById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStore)(nil).GetUserById), arg0, arg1)
}

// GetUserRolesByRoleId mocks base method.
func (m *MockStore) GetUserRolesByRoleId(arg0 context.Context, arg1 int32) ([]db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRolesByRoleId", arg0, arg1)
	ret0, _ := ret[0].([]db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRolesByRoleId indicates an expected call of GetUserRolesByRoleId.
func (mr *MockStoreMockRecorder) GetUserRolesByRoleId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRolesByRoleId", reflect.TypeOf((*MockStore)(nil).GetUserRolesByRoleId), arg0, arg1)
}

// GetUserRolesByUserId mocks base method.
func (m *MockStore) GetUserRolesByUserId(arg0 context.Context, arg1 int32) ([]db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRolesByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRolesByUserId indicates an expected call of GetUserRolesByUserId.
func (mr *MockStoreMockRecorder) GetUserRolesByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRolesByUserId", reflect.TypeOf((*MockStore)(nil).GetUserRolesByUserId), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockStore) GetUsers(arg0 context.Context, arg1 db.GetUsersParams) ([]db.GetUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockStoreMockRecorder) GetUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockStore)(nil).GetUsers), arg0, arg1)
}

// UpdateBooking mocks base method.
func (m *MockStore) UpdateBooking(arg0 context.Context, arg1 db.UpdateBookingParams) (db.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBooking", arg0, arg1)
	ret0, _ := ret[0].(db.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBooking indicates an expected call of UpdateBooking.
func (mr *MockStoreMockRecorder) UpdateBooking(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBooking", reflect.TypeOf((*MockStore)(nil).UpdateBooking), arg0, arg1)
}

// UpdateNotification mocks base method.
func (m *MockStore) UpdateNotification(arg0 context.Context, arg1 db.UpdateNotificationParams) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotification", arg0, arg1)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotification indicates an expected call of UpdateNotification.
func (mr *MockStoreMockRecorder) UpdateNotification(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotification", reflect.TypeOf((*MockStore)(nil).UpdateNotification), arg0, arg1)
}

// UpdateOrderItem mocks base method.
func (m *MockStore) UpdateOrderItem(arg0 context.Context, arg1 db.UpdateOrderItemParams) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderItem", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderItem indicates an expected call of UpdateOrderItem.
func (mr *MockStoreMockRecorder) UpdateOrderItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderItem", reflect.TypeOf((*MockStore)(nil).UpdateOrderItem), arg0, arg1)
}

// UpdateOrderStatus mocks base method.
func (m *MockStore) UpdateOrderStatus(arg0 context.Context, arg1 db.UpdateOrderStatusParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStoreMockRecorder) UpdateOrderStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStore)(nil).UpdateOrderStatus), arg0, arg1)
}

// UpdatePayment mocks base method.
func (m *MockStore) UpdatePayment(arg0 context.Context, arg1 db.UpdatePaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayment indicates an expected call of UpdatePayment.
func (mr *MockStoreMockRecorder) UpdatePayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayment", reflect.TypeOf((*MockStore)(nil).UpdatePayment), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockStore) UpdateProduct(arg0 context.Context, arg1 db.UpdateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStoreMockRecorder) UpdateProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStore)(nil).UpdateProduct), arg0, arg1)
}

// UpdateReview mocks base method.
func (m *MockStore) UpdateReview(arg0 context.Context, arg1 db.UpdateReviewParams) (db.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", arg0, arg1)
	ret0, _ := ret[0].(db.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockStoreMockRecorder) UpdateReview(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockStore)(nil).UpdateReview), arg0, arg1)
}

// UpdateRoleName mocks base method.
func (m *MockStore) UpdateRoleName(arg0 context.Context, arg1 db.UpdateRoleNameParams) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleName", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoleName indicates an expected call of UpdateRoleName.
func (mr *MockStoreMockRecorder) UpdateRoleName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleName", reflect.TypeOf((*MockStore)(nil).UpdateRoleName), arg0, arg1)
}

// UpdateSocialMedia mocks base method.
func (m *MockStore) UpdateSocialMedia(arg0 context.Context, arg1 db.UpdateSocialMediaParams) (db.SocialMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSocialMedia", arg0, arg1)
	ret0, _ := ret[0].(db.SocialMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSocialMedia indicates an expected call of UpdateSocialMedia.
func (mr *MockStoreMockRecorder) UpdateSocialMedia(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSocialMedia", reflect.TypeOf((*MockStore)(nil).UpdateSocialMedia), arg0, arg1)
}

// UpdateTestimonial mocks base method.
func (m *MockStore) UpdateTestimonial(arg0 context.Context, arg1 db.UpdateTestimonialParams) (db.Testimonial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTestimonial", arg0, arg1)
	ret0, _ := ret[0].(db.Testimonial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTestimonial indicates an expected call of UpdateTestimonial.
func (mr *MockStoreMockRecorder) UpdateTestimonial(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTestimonial", reflect.TypeOf((*MockStore)(nil).UpdateTestimonial), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.UpdateUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserAddress mocks base method.
func (m *MockStore) UpdateUserAddress(arg0 context.Context, arg1 db.UpdateUserAddressParams) (db.UpdateUserAddressRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAddress", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateUserAddressRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserAddress indicates an expected call of UpdateUserAddress.
func (mr *MockStoreMockRecorder) UpdateUserAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAddress", reflect.TypeOf((*MockStore)(nil).UpdateUserAddress), arg0, arg1)
}

// UpdateUserEmail mocks base method.
func (m *MockStore) UpdateUserEmail(arg0 context.Context, arg1 db.UpdateUserEmailParams) (db.UpdateUserEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserEmail", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateUserEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserEmail indicates an expected call of UpdateUserEmail.
func (mr *MockStoreMockRecorder) UpdateUserEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmail", reflect.TypeOf((*MockStore)(nil).UpdateUserEmail), arg0, arg1)
}

// UpdateUserName mocks base method.
func (m *MockStore) UpdateUserName(arg0 context.Context, arg1 db.UpdateUserNameParams) (db.UpdateUserNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserName", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateUserNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserName indicates an expected call of UpdateUserName.
func (mr *MockStoreMockRecorder) UpdateUserName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserName", reflect.TypeOf((*MockStore)(nil).UpdateUserName), arg0, arg1)
}

// UpdateUserPassword mocks base method.
func (m *MockStore) UpdateUserPassword(arg0 context.Context, arg1 db.UpdateUserPasswordParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockStoreMockRecorder) UpdateUserPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockStore)(nil).UpdateUserPassword), arg0, arg1)
}

// UpdateUserPhone mocks base method.
func (m *MockStore) UpdateUserPhone(arg0 context.Context, arg1 db.UpdateUserPhoneParams) (db.UpdateUserPhoneRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPhone", arg0, arg1)
	ret0, _ := ret[0].(db.UpdateUserPhoneRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPhone indicates an expected call of UpdateUserPhone.
func (mr *MockStoreMockRecorder) UpdateUserPhone(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhone", reflect.TypeOf((*MockStore)(nil).UpdateUserPhone), arg0, arg1)
}
