// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (first_name, last_name, email, password_hash, phone, address)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, first_name, last_name, email, phone, address, password_hash, password_updated_at, reset_token, reset_token_expires_at, created_at, updated_at
`

type CreateUserParams struct {
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
	Phone        string `json:"phone"`
	Address      string `json:"address"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.Phone,
		arg.Address,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.PasswordHash,
		&i.PasswordUpdatedAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmailAndPassword = `-- name: GetUserByEmailAndPassword :one
SELECT id, first_name, last_name, email, phone, address, created_at, updated_at
FROM "user"
WHERE email = $1
  AND password_hash = $2
LIMIT 1
`

type GetUserByEmailAndPasswordParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

type GetUserByEmailAndPasswordRow struct {
	ID        int32     `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	Address   string    `json:"address"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetUserByEmailAndPassword(ctx context.Context, arg GetUserByEmailAndPasswordParams) (GetUserByEmailAndPasswordRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmailAndPassword, arg.Email, arg.PasswordHash)
	var i GetUserByEmailAndPasswordRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmailOrPassword = `-- name: GetUserByEmailOrPassword :one
SELECT id, first_name, last_name, email, phone, address, created_at, updated_at
FROM "user"
WHERE id = $1 or email = $2 or phone = $3
LIMIT 1
`

type GetUserByEmailOrPasswordParams struct {
	ID    int32  `json:"id"`
	Email string `json:"email"`
	Phone string `json:"phone"`
}

type GetUserByEmailOrPasswordRow struct {
	ID        int32     `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	Address   string    `json:"address"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetUserByEmailOrPassword(ctx context.Context, arg GetUserByEmailOrPasswordParams) (GetUserByEmailOrPasswordRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmailOrPassword, arg.ID, arg.Email, arg.Phone)
	var i GetUserByEmailOrPasswordRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, email, phone, address, created_at, updated_at
FROM "user"
WHERE id = $1
LIMIT 1
`

type GetUserByIdRow struct {
	ID        int32     `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	Address   string    `json:"address"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetUserById(ctx context.Context, id int32) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, first_name, last_name, email, phone, address, password_hash, password_updated_at, reset_token, reset_token_expires_at, created_at, updated_at
FROM "user"
order by id
limit $1
offset $2
`

type GetUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.PasswordHash,
			&i.PasswordUpdatedAt,
			&i.ResetToken,
			&i.ResetTokenExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET first_name = $2,
    last_name  = $3,
    email = $4,
    phone = $5,
    address = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, first_name, last_name, email, phone, address, created_at, updated_at
`

type UpdateUserParams struct {
	ID        int32  `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	Phone     string `json:"phone"`
	Address   string `json:"address"`
}

type UpdateUserRow struct {
	ID        int32     `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	Address   string    `json:"address"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Address,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserAddress = `-- name: UpdateUserAddress :one
UPDATE "user"
SET address    = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, first_name, last_name, email, phone, address, created_at, updated_at
`

type UpdateUserAddressParams struct {
	ID      int32  `json:"id"`
	Address string `json:"address"`
}

type UpdateUserAddressRow struct {
	ID        int32     `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	Address   string    `json:"address"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUserAddress(ctx context.Context, arg UpdateUserAddressParams) (UpdateUserAddressRow, error) {
	row := q.db.QueryRow(ctx, updateUserAddress, arg.ID, arg.Address)
	var i UpdateUserAddressRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE "user"
SET email      = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, first_name, last_name, email, phone, address, created_at, updated_at
`

type UpdateUserEmailParams struct {
	ID    int32  `json:"id"`
	Email string `json:"email"`
}

type UpdateUserEmailRow struct {
	ID        int32     `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	Address   string    `json:"address"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (UpdateUserEmailRow, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.ID, arg.Email)
	var i UpdateUserEmailRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserName = `-- name: UpdateUserName :one
UPDATE "user"
SET first_name = $2,
    last_name  = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, first_name, last_name, email, phone, address, created_at, updated_at
`

type UpdateUserNameParams struct {
	ID        int32  `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

type UpdateUserNameRow struct {
	ID        int32     `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	Address   string    `json:"address"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (UpdateUserNameRow, error) {
	row := q.db.QueryRow(ctx, updateUserName, arg.ID, arg.FirstName, arg.LastName)
	var i UpdateUserNameRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE "user"
SET password_hash = $2,
    updated_at    = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, first_name, last_name, email, phone, address, password_hash, password_updated_at, reset_token, reset_token_expires_at, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	ID           int32  `json:"id"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.PasswordHash,
		&i.PasswordUpdatedAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPhone = `-- name: UpdateUserPhone :one
UPDATE "user"
SET phone      = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, first_name, last_name, email, phone, address, created_at, updated_at
`

type UpdateUserPhoneParams struct {
	ID    int32  `json:"id"`
	Phone string `json:"phone"`
}

type UpdateUserPhoneRow struct {
	ID        int32     `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	Address   string    `json:"address"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUserPhone(ctx context.Context, arg UpdateUserPhoneParams) (UpdateUserPhoneRow, error) {
	row := q.db.QueryRow(ctx, updateUserPhone, arg.ID, arg.Phone)
	var i UpdateUserPhoneRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
