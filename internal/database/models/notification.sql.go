// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: notification.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notification (user_id, message, sent_at)
VALUES ($1, $2, $3)
    RETURNING id, user_id, message, sent_at, created_at, updated_at
`

type CreateNotificationParams struct {
	UserID  pgtype.Int4 `json:"user_id"`
	Message pgtype.Text `json:"message"`
	SentAt  interface{} `json:"sent_at"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification, arg.UserID, arg.Message, arg.SentAt)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.SentAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE
FROM notification
WHERE id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteNotification, id)
	return err
}

const getAllNotifications = `-- name: GetAllNotifications :many
SELECT id, user_id, message, sent_at
FROM notification
`

type GetAllNotificationsRow struct {
	ID      int32       `json:"id"`
	UserID  pgtype.Int4 `json:"user_id"`
	Message pgtype.Text `json:"message"`
	SentAt  interface{} `json:"sent_at"`
}

func (q *Queries) GetAllNotifications(ctx context.Context) ([]GetAllNotificationsRow, error) {
	rows, err := q.db.Query(ctx, getAllNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllNotificationsRow{}
	for rows.Next() {
		var i GetAllNotificationsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Message,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationById = `-- name: GetNotificationById :one
SELECT id, user_id, message, sent_at
FROM notification
WHERE id = $1
    LIMIT 1
`

type GetNotificationByIdRow struct {
	ID      int32       `json:"id"`
	UserID  pgtype.Int4 `json:"user_id"`
	Message pgtype.Text `json:"message"`
	SentAt  interface{} `json:"sent_at"`
}

func (q *Queries) GetNotificationById(ctx context.Context, id int32) (GetNotificationByIdRow, error) {
	row := q.db.QueryRow(ctx, getNotificationById, id)
	var i GetNotificationByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.SentAt,
	)
	return i, err
}

const getNotificationsByUserId = `-- name: GetNotificationsByUserId :many
SELECT id, user_id, message, sent_at
FROM notification
WHERE user_id = $1
`

type GetNotificationsByUserIdRow struct {
	ID      int32       `json:"id"`
	UserID  pgtype.Int4 `json:"user_id"`
	Message pgtype.Text `json:"message"`
	SentAt  interface{} `json:"sent_at"`
}

func (q *Queries) GetNotificationsByUserId(ctx context.Context, userID pgtype.Int4) ([]GetNotificationsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getNotificationsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetNotificationsByUserIdRow{}
	for rows.Next() {
		var i GetNotificationsByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Message,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotification = `-- name: UpdateNotification :one
UPDATE notification
SET message = $2,
    sent_at = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    RETURNING id, user_id, message, sent_at, created_at, updated_at
`

type UpdateNotificationParams struct {
	ID      int32       `json:"id"`
	Message pgtype.Text `json:"message"`
	SentAt  interface{} `json:"sent_at"`
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, updateNotification, arg.ID, arg.Message, arg.SentAt)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.SentAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
