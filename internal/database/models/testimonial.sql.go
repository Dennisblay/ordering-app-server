// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: testimonial.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTestimonial = `-- name: CreateTestimonial :one
INSERT INTO testimonial (user_id, message)
VALUES ($1, $2)
    RETURNING id, user_id, message, created_at, updated_at
`

type CreateTestimonialParams struct {
	UserID  pgtype.Int4 `json:"user_id"`
	Message pgtype.Text `json:"message"`
}

func (q *Queries) CreateTestimonial(ctx context.Context, arg CreateTestimonialParams) (Testimonial, error) {
	row := q.db.QueryRow(ctx, createTestimonial, arg.UserID, arg.Message)
	var i Testimonial
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTestimonial = `-- name: DeleteTestimonial :exec
DELETE
FROM testimonial
WHERE id = $1
`

func (q *Queries) DeleteTestimonial(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTestimonial, id)
	return err
}

const getAllTestimonials = `-- name: GetAllTestimonials :many
SELECT id, user_id, message
FROM testimonial
`

type GetAllTestimonialsRow struct {
	ID      int32       `json:"id"`
	UserID  pgtype.Int4 `json:"user_id"`
	Message pgtype.Text `json:"message"`
}

func (q *Queries) GetAllTestimonials(ctx context.Context) ([]GetAllTestimonialsRow, error) {
	rows, err := q.db.Query(ctx, getAllTestimonials)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllTestimonialsRow{}
	for rows.Next() {
		var i GetAllTestimonialsRow
		if err := rows.Scan(&i.ID, &i.UserID, &i.Message); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTestimonialById = `-- name: GetTestimonialById :one
SELECT id, user_id, message
FROM testimonial
WHERE id = $1
    LIMIT 1
`

type GetTestimonialByIdRow struct {
	ID      int32       `json:"id"`
	UserID  pgtype.Int4 `json:"user_id"`
	Message pgtype.Text `json:"message"`
}

func (q *Queries) GetTestimonialById(ctx context.Context, id int32) (GetTestimonialByIdRow, error) {
	row := q.db.QueryRow(ctx, getTestimonialById, id)
	var i GetTestimonialByIdRow
	err := row.Scan(&i.ID, &i.UserID, &i.Message)
	return i, err
}

const getTestimonialsByUserId = `-- name: GetTestimonialsByUserId :many
SELECT id, user_id, message
FROM testimonial
WHERE user_id = $1
`

type GetTestimonialsByUserIdRow struct {
	ID      int32       `json:"id"`
	UserID  pgtype.Int4 `json:"user_id"`
	Message pgtype.Text `json:"message"`
}

func (q *Queries) GetTestimonialsByUserId(ctx context.Context, userID pgtype.Int4) ([]GetTestimonialsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getTestimonialsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTestimonialsByUserIdRow{}
	for rows.Next() {
		var i GetTestimonialsByUserIdRow
		if err := rows.Scan(&i.ID, &i.UserID, &i.Message); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTestimonial = `-- name: UpdateTestimonial :one
UPDATE testimonial
SET message = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    RETURNING id, user_id, message, created_at, updated_at
`

type UpdateTestimonialParams struct {
	ID      int32       `json:"id"`
	Message pgtype.Text `json:"message"`
}

func (q *Queries) UpdateTestimonial(ctx context.Context, arg UpdateTestimonialParams) (Testimonial, error) {
	row := q.db.QueryRow(ctx, updateTestimonial, arg.ID, arg.Message)
	var i Testimonial
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
