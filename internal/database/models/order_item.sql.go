// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order_item.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_item (order_id, product_id, quantity, price)
VALUES ($1, $2, $3, $4)
    RETURNING id, order_id, product_id, quantity, price, created_at, updated_at
`

type CreateOrderItemParams struct {
	OrderID   pgtype.Int4    `json:"order_id"`
	ProductID pgtype.Int4    `json:"product_id"`
	Quantity  pgtype.Int4    `json:"quantity"`
	Price     pgtype.Numeric `json:"price"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE
FROM order_item
WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOrderItem, id)
	return err
}

const getAllOrderItems = `-- name: GetAllOrderItems :many
SELECT id, order_id, product_id, quantity, price
FROM order_item
`

type GetAllOrderItemsRow struct {
	ID        int32          `json:"id"`
	OrderID   pgtype.Int4    `json:"order_id"`
	ProductID pgtype.Int4    `json:"product_id"`
	Quantity  pgtype.Int4    `json:"quantity"`
	Price     pgtype.Numeric `json:"price"`
}

func (q *Queries) GetAllOrderItems(ctx context.Context) ([]GetAllOrderItemsRow, error) {
	rows, err := q.db.Query(ctx, getAllOrderItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllOrderItemsRow{}
	for rows.Next() {
		var i GetAllOrderItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderItemById = `-- name: GetOrderItemById :one
SELECT id, order_id, product_id, quantity, price
FROM order_item
WHERE id = $1
    LIMIT 1
`

type GetOrderItemByIdRow struct {
	ID        int32          `json:"id"`
	OrderID   pgtype.Int4    `json:"order_id"`
	ProductID pgtype.Int4    `json:"product_id"`
	Quantity  pgtype.Int4    `json:"quantity"`
	Price     pgtype.Numeric `json:"price"`
}

func (q *Queries) GetOrderItemById(ctx context.Context, id int32) (GetOrderItemByIdRow, error) {
	row := q.db.QueryRow(ctx, getOrderItemById, id)
	var i GetOrderItemByIdRow
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const getOrderItemsByOrderId = `-- name: GetOrderItemsByOrderId :many
SELECT id, order_id, product_id, quantity, price
FROM order_item
WHERE order_id = $1
`

type GetOrderItemsByOrderIdRow struct {
	ID        int32          `json:"id"`
	OrderID   pgtype.Int4    `json:"order_id"`
	ProductID pgtype.Int4    `json:"product_id"`
	Quantity  pgtype.Int4    `json:"quantity"`
	Price     pgtype.Numeric `json:"price"`
}

func (q *Queries) GetOrderItemsByOrderId(ctx context.Context, orderID pgtype.Int4) ([]GetOrderItemsByOrderIdRow, error) {
	rows, err := q.db.Query(ctx, getOrderItemsByOrderId, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrderItemsByOrderIdRow{}
	for rows.Next() {
		var i GetOrderItemsByOrderIdRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItem = `-- name: UpdateOrderItem :one
UPDATE order_item
SET quantity = $2,
    price = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    RETURNING id, order_id, product_id, quantity, price, created_at, updated_at
`

type UpdateOrderItemParams struct {
	ID       int32          `json:"id"`
	Quantity pgtype.Int4    `json:"quantity"`
	Price    pgtype.Numeric `json:"price"`
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, updateOrderItem, arg.ID, arg.Quantity, arg.Price)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
