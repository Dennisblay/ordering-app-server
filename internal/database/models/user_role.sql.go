// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_role.sql

package db

import (
	"context"
)

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO "user_role" (user_id, role_id)
VALUES ($1, $2)
    RETURNING user_id, role_id
`

type CreateUserRoleParams struct {
	UserID int32 `json:"user_id"`
	RoleID int32 `json:"role_id"`
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, createUserRole, arg.UserID, arg.RoleID)
	var i UserRole
	err := row.Scan(&i.UserID, &i.RoleID)
	return i, err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
DELETE
FROM "user_role"
WHERE user_id = $1 AND role_id = $2
`

type DeleteUserRoleParams struct {
	UserID int32 `json:"user_id"`
	RoleID int32 `json:"role_id"`
}

func (q *Queries) DeleteUserRole(ctx context.Context, arg DeleteUserRoleParams) error {
	_, err := q.db.Exec(ctx, deleteUserRole, arg.UserID, arg.RoleID)
	return err
}

const getAllUserRoles = `-- name: GetAllUserRoles :many
SELECT user_id, role_id
FROM "user_role"
`

func (q *Queries) GetAllUserRoles(ctx context.Context) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getAllUserRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserRole{}
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(&i.UserID, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRolesByRoleId = `-- name: GetUserRolesByRoleId :many
SELECT user_id, role_id
FROM "user_role"
WHERE role_id = $1
`

func (q *Queries) GetUserRolesByRoleId(ctx context.Context, roleID int32) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getUserRolesByRoleId, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserRole{}
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(&i.UserID, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRolesByUserId = `-- name: GetUserRolesByUserId :many
SELECT user_id, role_id
FROM "user_role"
WHERE user_id = $1
`

func (q *Queries) GetUserRolesByUserId(ctx context.Context, userID int32) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getUserRolesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserRole{}
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(&i.UserID, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
