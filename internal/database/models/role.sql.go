// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package db

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO "role" (name)
VALUES ($1)
    RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateRole(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE
FROM "role"
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getAllRoles = `-- name: GetAllRoles :many
SELECT id, name
FROM "role"
`

type GetAllRolesRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetAllRoles(ctx context.Context) ([]GetAllRolesRow, error) {
	rows, err := q.db.Query(ctx, getAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllRolesRow{}
	for rows.Next() {
		var i GetAllRolesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleById = `-- name: GetRoleById :one
SELECT id, name
FROM "role"
WHERE id = $1
    LIMIT 1
`

type GetRoleByIdRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetRoleById(ctx context.Context, id int32) (GetRoleByIdRow, error) {
	row := q.db.QueryRow(ctx, getRoleById, id)
	var i GetRoleByIdRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name
FROM "role"
WHERE name = $1
    LIMIT 1
`

type GetRoleByNameRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetRoleByName(ctx context.Context, name string) (GetRoleByNameRow, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i GetRoleByNameRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateRoleName = `-- name: UpdateRoleName :one
UPDATE "role"
SET name = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    RETURNING id, name, created_at, updated_at
`

type UpdateRoleNameParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateRoleName(ctx context.Context, arg UpdateRoleNameParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRoleName, arg.ID, arg.Name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
