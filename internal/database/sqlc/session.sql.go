// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO "session" (user_id, token, expires_at)
VALUES ($1, $2, $3)
    RETURNING id, user_id, token, expires_at, created_at, updated_at
`

type CreateSessionParams struct {
	UserID    pgtype.Int4 `json:"user_id"`
	Token     string      `json:"token"`
	ExpiresAt interface{} `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.Token, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE
FROM "session"
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getAllSessions = `-- name: GetAllSessions :many
SELECT id, user_id, token, expires_at
FROM "session"
`

type GetAllSessionsRow struct {
	ID        int32       `json:"id"`
	UserID    pgtype.Int4 `json:"user_id"`
	Token     string      `json:"token"`
	ExpiresAt interface{} `json:"expires_at"`
}

func (q *Queries) GetAllSessions(ctx context.Context) ([]GetAllSessionsRow, error) {
	rows, err := q.db.Query(ctx, getAllSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllSessionsRow{}
	for rows.Next() {
		var i GetAllSessionsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionById = `-- name: GetSessionById :one
SELECT id, user_id, token, expires_at
FROM "session"
WHERE id = $1
    LIMIT 1
`

type GetSessionByIdRow struct {
	ID        int32       `json:"id"`
	UserID    pgtype.Int4 `json:"user_id"`
	Token     string      `json:"token"`
	ExpiresAt interface{} `json:"expires_at"`
}

func (q *Queries) GetSessionById(ctx context.Context, id int32) (GetSessionByIdRow, error) {
	row := q.db.QueryRow(ctx, getSessionById, id)
	var i GetSessionByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, token, expires_at
FROM "session"
WHERE token = $1
    LIMIT 1
`

type GetSessionByTokenRow struct {
	ID        int32       `json:"id"`
	UserID    pgtype.Int4 `json:"user_id"`
	Token     string      `json:"token"`
	ExpiresAt interface{} `json:"expires_at"`
}

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (GetSessionByTokenRow, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, token)
	var i GetSessionByTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
	)
	return i, err
}
