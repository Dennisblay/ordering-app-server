// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (name, description, category, price, stock)
VALUES ($1, $2, $3, $4, $5)
    RETURNING id, name, description, category, price, stock, created_at, updated_at
`

type CreateProductParams struct {
	Name        pgtype.Text    `json:"name"`
	Description pgtype.Text    `json:"description"`
	Category    pgtype.Text    `json:"category"`
	Price       pgtype.Numeric `json:"price"`
	Stock       pgtype.Int4    `json:"stock"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Price,
		arg.Stock,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE
FROM product
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, description, category, price, stock
FROM product
`

type GetAllProductsRow struct {
	ID          int32          `json:"id"`
	Name        pgtype.Text    `json:"name"`
	Description pgtype.Text    `json:"description"`
	Category    pgtype.Text    `json:"category"`
	Price       pgtype.Numeric `json:"price"`
	Stock       pgtype.Int4    `json:"stock"`
}

func (q *Queries) GetAllProducts(ctx context.Context) ([]GetAllProductsRow, error) {
	rows, err := q.db.Query(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllProductsRow{}
	for rows.Next() {
		var i GetAllProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Stock,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductById = `-- name: GetProductById :one
SELECT id, name, description, category, price, stock
FROM product
WHERE id = $1
    LIMIT 1
`

type GetProductByIdRow struct {
	ID          int32          `json:"id"`
	Name        pgtype.Text    `json:"name"`
	Description pgtype.Text    `json:"description"`
	Category    pgtype.Text    `json:"category"`
	Price       pgtype.Numeric `json:"price"`
	Stock       pgtype.Int4    `json:"stock"`
}

func (q *Queries) GetProductById(ctx context.Context, id int32) (GetProductByIdRow, error) {
	row := q.db.QueryRow(ctx, getProductById, id)
	var i GetProductByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Stock,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE product
SET name = $2,
    description = $3,
    category = $4,
    price = $5,
    stock = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    RETURNING id, name, description, category, price, stock, created_at, updated_at
`

type UpdateProductParams struct {
	ID          int32          `json:"id"`
	Name        pgtype.Text    `json:"name"`
	Description pgtype.Text    `json:"description"`
	Category    pgtype.Text    `json:"category"`
	Price       pgtype.Numeric `json:"price"`
	Stock       pgtype.Int4    `json:"stock"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Price,
		arg.Stock,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
