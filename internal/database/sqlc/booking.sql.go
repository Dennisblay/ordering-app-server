// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: booking.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO booking (user_id, event_date, event_type, guest_count, location)
VALUES ($1, $2, $3, $4, $5)
    RETURNING id, user_id, event_date, event_type, guest_count, location, created_at, updated_at
`

type CreateBookingParams struct {
	UserID     pgtype.Int4 `json:"user_id"`
	EventDate  pgtype.Date `json:"event_date"`
	EventType  pgtype.Text `json:"event_type"`
	GuestCount pgtype.Int4 `json:"guest_count"`
	Location   pgtype.Text `json:"location"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRow(ctx, createBooking,
		arg.UserID,
		arg.EventDate,
		arg.EventType,
		arg.GuestCount,
		arg.Location,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventDate,
		&i.EventType,
		&i.GuestCount,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBooking = `-- name: DeleteBooking :exec
DELETE
FROM booking
WHERE id = $1
`

func (q *Queries) DeleteBooking(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBooking, id)
	return err
}

const getAllBookings = `-- name: GetAllBookings :many
SELECT id, user_id, event_date, event_type, guest_count, location
FROM booking
`

type GetAllBookingsRow struct {
	ID         int32       `json:"id"`
	UserID     pgtype.Int4 `json:"user_id"`
	EventDate  pgtype.Date `json:"event_date"`
	EventType  pgtype.Text `json:"event_type"`
	GuestCount pgtype.Int4 `json:"guest_count"`
	Location   pgtype.Text `json:"location"`
}

func (q *Queries) GetAllBookings(ctx context.Context) ([]GetAllBookingsRow, error) {
	rows, err := q.db.Query(ctx, getAllBookings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllBookingsRow{}
	for rows.Next() {
		var i GetAllBookingsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventDate,
			&i.EventType,
			&i.GuestCount,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookingById = `-- name: GetBookingById :one
SELECT id, user_id, event_date, event_type, guest_count, location
FROM booking
WHERE id = $1
    LIMIT 1
`

type GetBookingByIdRow struct {
	ID         int32       `json:"id"`
	UserID     pgtype.Int4 `json:"user_id"`
	EventDate  pgtype.Date `json:"event_date"`
	EventType  pgtype.Text `json:"event_type"`
	GuestCount pgtype.Int4 `json:"guest_count"`
	Location   pgtype.Text `json:"location"`
}

func (q *Queries) GetBookingById(ctx context.Context, id int32) (GetBookingByIdRow, error) {
	row := q.db.QueryRow(ctx, getBookingById, id)
	var i GetBookingByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventDate,
		&i.EventType,
		&i.GuestCount,
		&i.Location,
	)
	return i, err
}

const getBookingsByUserId = `-- name: GetBookingsByUserId :many
SELECT id, user_id, event_date, event_type, guest_count, location
FROM booking
WHERE user_id = $1
`

type GetBookingsByUserIdRow struct {
	ID         int32       `json:"id"`
	UserID     pgtype.Int4 `json:"user_id"`
	EventDate  pgtype.Date `json:"event_date"`
	EventType  pgtype.Text `json:"event_type"`
	GuestCount pgtype.Int4 `json:"guest_count"`
	Location   pgtype.Text `json:"location"`
}

func (q *Queries) GetBookingsByUserId(ctx context.Context, userID pgtype.Int4) ([]GetBookingsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getBookingsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBookingsByUserIdRow{}
	for rows.Next() {
		var i GetBookingsByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventDate,
			&i.EventType,
			&i.GuestCount,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBooking = `-- name: UpdateBooking :one
UPDATE booking
SET event_date = $2,
    event_type = $3,
    guest_count = $4,
    location = $5,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    RETURNING id, user_id, event_date, event_type, guest_count, location, created_at, updated_at
`

type UpdateBookingParams struct {
	ID         int32       `json:"id"`
	EventDate  pgtype.Date `json:"event_date"`
	EventType  pgtype.Text `json:"event_type"`
	GuestCount pgtype.Int4 `json:"guest_count"`
	Location   pgtype.Text `json:"location"`
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) (Booking, error) {
	row := q.db.QueryRow(ctx, updateBooking,
		arg.ID,
		arg.EventDate,
		arg.EventType,
		arg.GuestCount,
		arg.Location,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventDate,
		&i.EventType,
		&i.GuestCount,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
