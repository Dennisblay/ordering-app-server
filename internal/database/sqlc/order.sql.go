// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order" (user_id, total_price, status, delivery_date)
VALUES ($1, $2, $3, $4)
    RETURNING id, user_id, total_price, status, delivery_date, created_at, updated_at
`

type CreateOrderParams struct {
	UserID       pgtype.Int4    `json:"user_id"`
	TotalPrice   pgtype.Numeric `json:"total_price"`
	Status       pgtype.Text    `json:"status"`
	DeliveryDate pgtype.Date    `json:"delivery_date"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.UserID,
		arg.TotalPrice,
		arg.Status,
		arg.DeliveryDate,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalPrice,
		&i.Status,
		&i.DeliveryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE
FROM "order"
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getAllOrders = `-- name: GetAllOrders :many
SELECT id, user_id, total_price, status, delivery_date
FROM "order"
`

type GetAllOrdersRow struct {
	ID           int32          `json:"id"`
	UserID       pgtype.Int4    `json:"user_id"`
	TotalPrice   pgtype.Numeric `json:"total_price"`
	Status       pgtype.Text    `json:"status"`
	DeliveryDate pgtype.Date    `json:"delivery_date"`
}

func (q *Queries) GetAllOrders(ctx context.Context) ([]GetAllOrdersRow, error) {
	rows, err := q.db.Query(ctx, getAllOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllOrdersRow{}
	for rows.Next() {
		var i GetAllOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TotalPrice,
			&i.Status,
			&i.DeliveryDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, user_id, total_price, status, delivery_date
FROM "order"
WHERE id = $1
    LIMIT 1
`

type GetOrderByIdRow struct {
	ID           int32          `json:"id"`
	UserID       pgtype.Int4    `json:"user_id"`
	TotalPrice   pgtype.Numeric `json:"total_price"`
	Status       pgtype.Text    `json:"status"`
	DeliveryDate pgtype.Date    `json:"delivery_date"`
}

func (q *Queries) GetOrderById(ctx context.Context, id int32) (GetOrderByIdRow, error) {
	row := q.db.QueryRow(ctx, getOrderById, id)
	var i GetOrderByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalPrice,
		&i.Status,
		&i.DeliveryDate,
	)
	return i, err
}

const getOrdersByUserId = `-- name: GetOrdersByUserId :many
SELECT id, user_id, total_price, status, delivery_date
FROM "order"
WHERE user_id = $1
`

type GetOrdersByUserIdRow struct {
	ID           int32          `json:"id"`
	UserID       pgtype.Int4    `json:"user_id"`
	TotalPrice   pgtype.Numeric `json:"total_price"`
	Status       pgtype.Text    `json:"status"`
	DeliveryDate pgtype.Date    `json:"delivery_date"`
}

func (q *Queries) GetOrdersByUserId(ctx context.Context, userID pgtype.Int4) ([]GetOrdersByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getOrdersByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrdersByUserIdRow{}
	for rows.Next() {
		var i GetOrdersByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TotalPrice,
			&i.Status,
			&i.DeliveryDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE "order"
SET status = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    RETURNING id, user_id, total_price, status, delivery_date, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID     int32       `json:"id"`
	Status pgtype.Text `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalPrice,
		&i.Status,
		&i.DeliveryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
